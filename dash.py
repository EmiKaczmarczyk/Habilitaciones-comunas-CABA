# -*- coding: utf-8 -*-
"""Dash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N8EZJTnFp407jTy5GnOcwOlPal7cOlWm
"""

# Instalaci칩n
!pip install jupyter-dash
!pip install dash
!pip install dash_core_components
!pip install dash_html_components
!pip install dash_table
!pip install dash_bootstrap_components

import pandas as pd
from jupyter_dash import JupyterDash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input,Output,State
import plotly.express as px
import json
import dash_bootstrap_components as dbc

df_IngreXPob=pd.read_csv('df_final.csv').reset_index(drop=True)

df_IngreXPob=df_IngreXPob.drop(columns=["Unnamed: 0"])

graph=px.scatter(df_IngreXPob,
                 x="Q de habilitaciones 2019",
                 y="Diferencia 17-19",
                 width=800,
                 height=350,
                 size="Promedio IPCF",
                 color="Comuna",
                 labels={"Diferencia 17-19": "Crecimiento poblacional 2017-2019",
                         "Q de habilitaciones 2019": "Cantidad de habilitaciones 2019"
                        },
                 hover_name='Comuna',
                 hover_data={'Diferencia 17-19':True,
                             'Comuna':False,
                             'Promedio IPCF':':$,.0f', #d3-format's syntax
                             'Q de habilitaciones 2019':True,
                            },
                 size_max=60)

graph.update_layout(title_text='Relaci칩n crecimiento poblacional 2017-2019 con habilitaciones comerciales 2019<br>avg IPCF',
                  showlegend=False,
                  hoverlabel=dict(bgcolor="white",
                                  font_size=12,
                                  font_family="Georgia")
                 )
# print("plotly express hovertemplate:", fig.data[0].hovertemplate)
graph.update_traces(hovertemplate='<b>Comuna %{hovertext}</b><br>Cantidad de habilitaciones 2019: <b>%{x}</b><br>Crecimiento poblacional 2017-2019: <b>%{y}</b><br>Promedio IPCF: <b>%{customdata[1]:$,.0f}</b><extra></extra>')
graph.update_xaxes(showspikes=True,spikecolor="black",spikethickness=2)
graph.update_yaxes(showspikes=True,spikecolor="black",spikethickness=2)

graph.show()

with open('CABA_comunas.geojson') as f:
  comunas_caba = json.load(f)

center_lat=comunas_caba["features"][1]['geometry']['coordinates'][0][0][0][1]
center_lon=comunas_caba["features"][1]['geometry']['coordinates'][0][0][0][0]

max_value = df_IngreXPob['Diferencia 17-19'].max()
min_value=df_IngreXPob['Diferencia 17-19'].min()

#Source code RGB: https://htmlcolorcodes.com/es/
colorscale = [
              [0, 'rgb(255,255,255)'],
              [0.3, 'rgb(185,185,185)'],
              [0.5, 'rgb(134,134,134)'],
              [0.8, 'rgb(82,82,82)'],
              [1.0, 'rgb(0,0,0)']
]

mapa1 = px.choropleth(df_IngreXPob,
                    geojson=comunas_caba,
                    locations='Comuna',       
                    color='Diferencia 17-19',
                    color_continuous_scale='Reds',
                    range_color=(min_value, max_value),
                    featureidkey="properties.COMUNAS",
                    projection="mercator",
                    hover_name='Comuna',
                    hover_data={'Diferencia 17-19':True,
                                'Comuna':False,
                                'Promedio IPCF':':$,.0f', #d3-format's syntax
                                'Q de habilitaciones 2019':True,         
                               }
                    )
mapa1.update_geos(fitbounds="locations", visible=False)
mapa1.update_layout(margin={"r":0,"t":40,"l":0,"b":0},
                  title_text = 'Comunas CABA s/ crecimiento poblacional 2017-2019',
                  hoverlabel=dict(bgcolor="white",
                                  font_size=12,
                                  font_family="Georgia")
                 )
mapa1.show()

max_value = df_IngreXPob['Diferencia 17-19'].max()
min_value=df_IngreXPob['Diferencia 17-19'].min()

#Source code RGB: https://htmlcolorcodes.com/es/
colorscale = [
              [0, 'rgb(255,255,255)'],
              [0.3, 'rgb(185,185,185)'],
              [0.5, 'rgb(134,134,134)'],
              [0.8, 'rgb(82,82,82)'],
              [1.0, 'rgb(0,0,0)']
]

mapa2 = px.choropleth(df_IngreXPob,
                    geojson=comunas_caba,
                    locations='Comuna',       
                    color='Q de habilitaciones 2019',
                    color_continuous_scale='Reds',
                    range_color=(min_value, max_value),
                    featureidkey="properties.COMUNAS",
                    projection="mercator",
                    hover_name='Comuna',
                    hover_data={'Q de habilitaciones 2019':True,
                                'Diferencia 17-19':True,
                                'Comuna':False,
                                'Promedio IPCF':':$,.0f', #d3-format's syntax,         
                               }
                    )
mapa2.update_geos(fitbounds="locations", visible=False)
mapa2.update_layout(margin=dict(l=0, r=0, t=25, b=0),
                  title_text = 'Comunas CABA s/ Q de habilitaciones 2019',
                  hoverlabel=dict(bgcolor="white",
                                  font_size=12,
                                  font_family="Georgia")
                 )
mapa2.show()

center_lat=comunas_caba["features"][1]['geometry']['coordinates'][0][0][0][1]
center_lon=comunas_caba["features"][1]['geometry']['coordinates'][0][0][0][0]

max_value = df_IngreXPob['ha/mil_habitantes'].max()
mapa3 = px.choropleth(df_IngreXPob,
                    geojson=comunas_caba,
                    locations='Comuna',       
                    color='ha/mil_habitantes',
                    color_continuous_scale="Greens",
                    range_color=(0, max_value),
                    featureidkey="properties.COMUNAS",
                    projection="mercator",
                    hover_name='Comuna')
mapa3.update_geos(fitbounds="locations", visible=False)
mapa3.update_layout(margin={"r":0,"t":40,"l":0,"b":0},
                  title_text = 'Hectareas de espacio verde cada mil habitantes',
                  hoverlabel=dict(bgcolor="white",
                                  font_size=12,
                                  font_family="Arial")
                 )
mapa3.show()

from plotly.subplots import make_subplots
import plotly.graph_objects as go

# Creo una figura con eje y secundario
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Agrego mis trazos

fig.add_trace(
    go.Bar(x=df_IngreXPob["Comuna"],
        y=df_IngreXPob["Promedio IPCF"], name="Ingreso per capita familiar", marker_color='#ff8c00', opacity=0.6),
    secondary_y=False
)

fig.add_trace(
    go.Scatter(x=df_IngreXPob["Comuna"],
        y=df_IngreXPob["Q de habilitaciones 2019"], name="Habilitaciones",marker_color='#800080'),
    secondary_y=True,
)



fig.update_layout(title_text="Q de habilitaciones e ingresos por comuna",
    title={"x":0.1,
           "font":{"size":20, "color":"black"}} 
)

#Titulo de x
fig.update_xaxes(title_text="Comunas",type='category')


#Titulo de y
fig.update_yaxes(title_text="Ingreso en pesos", secondary_y=False)
fig.update_yaxes(title_text="Cantidad de habilitaciones", secondary_y=True)

fig.show()

#https://dash-bootstrap-components.opensource.faculty.ai/docs/quickstart/
app = JupyterDash(
    external_stylesheets=[dbc.themes.BOOTSTRAP]
)

app = JupyterDash(external_stylesheets=[dbc.themes.CERULEAN])

app.layout = dbc.Container(
    [
        dcc.Store(id="store"),

        html.Div(
            id="banner",
            className="banner",
            children=[html.H3("Proyecto Final Grupo 4"),html.Hr(),html.Img(src='/assets/logo_eant.png')]
        ),
        dbc.Button(
            "",
            color="primary",
            block=True,
            id="button",
            className="mb-3",
        ),
        dbc.Tabs(
            [
                dbc.Tab(label="Scope", tab_id="scope"),
                dbc.Tab(label="Limitaciones", tab_id="limitaciones"),
                dbc.Tab(label="Gr치ficos", tab_id="graficos"),
                dbc.Tab(label="Mapa por comunas CABA", tab_id="choropleth"),
                dbc.Tab(label="Mapa de espacios verdes", tab_id="verde")
            ],
            id="tabs",
            active_tab="scope",
        ),
        html.Div(id="tab-content",
                 className="p-4",
                 style={'backgroundColor': 'white'}),
    ]
)


@app.callback(
    Output("tab-content", "children"),
    [Input("tabs", "active_tab"), Input("store", "data")],
)
def render_tab_content(active_tab, data):
    """
    This callback takes the 'active_tab' property as input, as well as the
    stored graphs, and renders the tab content depending on what the value of
    'active_tab' is.
    """
    if active_tab is not None:
        if active_tab == "scope":
            return html.Div(
                            children=[html.H4('Scope', style={'color':'black','font-weight': 'bold'}),
                                      html.H5(['Relaci칩n entre crecimiento poblacional y distintas variables como la cantidad de habilitaciones comerciales 2019, espacios verdes e ingreso percapita familiar por ',
                                               html.Span('comuna',
                                                         id="tooltip-target",
                                                         style={"textDecoration": "underline", "cursor": "pointer"},
                                               )],
                                               style={'color':'black'}),
                                      dbc.Tooltip(
                                                  html.A("www.buenosaires.gob.ar/comunas",
                                                         href='https://www.buenosaires.gob.ar/comunas',
                                                         style={'color':'white'}, 
                                                         target="_blank"),
                                                  autohide=False,
                                                  target="tooltip-target",
                                                  style={'backgroundColor': 'rgb(102,118,255)'},
                                      ),
                                      html.Br(),
                                      dbc.CardDeck(
                                    [   
                                      dbc.Card(
                                               [
                                                dbc.CardImg(src='/assets/team.png', style={'height':'15%', 'width':'25%'}, top=True, className = 'align-self-center'),
                                                dbc.CardBody(                         
                                                             [html.H4('Integrantes',
                                                                      className="card-title",      
                                                                      style={'color':'black','font-weight': 'bold', 'text-align': 'center'}),
                                                                      html.Br(),
                                                                      html.H5(children=[html.Li('Emilia Kaczmarczyk'),
                                                                                        html.Li('Sergio Fasan'),
                                                                                        html.Li('Pablo Barco'),
                                                                                        html.Li('Mart칤n Rodr칤guez')],   
                                                                              className="card-text",
                                                                              style={'color':'black'}
                                                                      ),
                                                ],
                                                ),
                                     ],
                                      style={"width": "18rem"},
                                     ),
                                      dbc.Card(
                                               [
                                                dbc.CardImg(src='/assets/datasets.png', style={'height':'15%', 'width':'25%'}, top=True, className = 'align-self-center'),
                                                dbc.CardBody(                         
                                                             [html.H4('Datasets utilizados',
                                                                          style={'color':'black','font-weight': 'bold', 'text-align': 'center'}),
                                                                          html.Br(),
                                                                          html.H5(children=[html.Li('habilitaciones-2015-a-2018.csv'),
                                                                                            html.Li('habilitaciones-2019.csv'),
                                                                                            html.Li('MT_eah_2417.xslx'),
                                                                                            html.Li('PDE.xslx'),
                                                                                            html.Li('CABA_comunas.geojson'),
                                                                                            html.Li("espacios-verdes-por-habitante-por-comuna.csv")],                                                                                                                                                                 style={'color':'black'}),
                                                  ],
                                                ),
                                     ],
                                      style={"width": "18rem"},
                                     ),
                                      dbc.Card(
                                               [
                                                dbc.CardImg(src='/assets/library.png', style={'height':'15%', 'width':'23%'}, top=True, className = 'align-self-center'),
                                                dbc.CardBody(                         
                                                             [html.H4('Librer칤as utilizadas',
                                                                          style={'color':'black','font-weight': 'bold', 'text-align': 'center'}),
                                                                          html.Br(),
                                                                          html.H5(children=[html.Li('pandas'),
                                                                                            html.Li('matplotlib.pyplot'),
                                                                                            html.Li('plotly.express'),
                                                                                            html.Li('json'),
                                                                                            html.Li('jupyter_dash'),
                                                                                            html.Li('dash_core_components'),
                                                                                            html.Li('dash_html_components'),
                                                                                            html.Li('dash.dependencies'),
                                                                                            html.Li('dash_table'),
                                                                                            html.Li('dash_bootstrap_components'),
                                                                                          ],
                                                                                  style={'color':'black'}),
                                                  ],
                                                ),
                                     ],
                                      style={"width": "18rem"},
                                     ),
                                ],
                                ),          
                            ],   
         ),                           
        elif active_tab=='limitaciones':
            return html.Div(
                            html.H5(children=[html.Li('El dataset de habilitaciones comerciales 2015 a 2019 no indica las comunas a las que pertenecen las habilitaciones comerciales. Para simplificar el ejercicio se s칩lo se consideraron las habilitaciones por comuna 2019.', style={'color':'black'}),
                                      html.Br(),
                                      html.Li('El dataset de habilitaciones comerciales 2019 no indica las comunas a las que pertenecen 4509 habilitaciones comerciales de un total de 32578. Para simplificar el ejercicio se eliminaron del dataframe.',
                                              style={'color':'black'}),
                                       html.Br(),
                                      html.Li("Para realizar el mapa de espacios verdes por habitante de cada comuna, se utilizaron los datos m치s actualizados correspondientes al a침o 2018, mientras que los datos sobre la cantidad de poblaci칩n corresponden al 2019. De todas formas, las diferencias no son significativas.",style={'color':'black'})        
                                     ]
                                   )
                           ),
        elif active_tab == "graficos":
            return html.Div(
                            html.H5(children=[dbc.Row(
                                                      [
                                                       dbc.Col('El siguiente gr치fico de bubble chart muestra que de las 15 comunas solo la Comuna 1 muestra correlaci칩n entre el aumento de la poblaci칩n y altos niveles de IPCF con incremento de las habilitaciones comerciales.', style={'color':'black'}),
                                                       dbc.Col(dcc.Graph(figure=graph)),
                                                      ]
                                             ),
                                              dbc.Row(
                                                      [
                                                       dbc.Col('Este grafico muestra que puede haber una correlaci칩n, pero no una relaci칩n directa, entre el ingreso per c치pita familiar y la cantidad de habilitaciones comerciales por comuna.', style={'color':'black'}),
                                                       dbc.Col(dcc.Graph(figure=fig),width=9),
                                                      ]
                                             ),
                                             ])),
        elif active_tab == "choropleth":
            return html.Div(
                            html.H5(children=[html.H5('La diferencia de intensidad de los colores de los mapas por comunas muestra que no existe correlaci칩n entre el aumento de la poblaci칩n y el incremento de las habilitaciones comerciales.', style={'color':'black'}),
                                      html.Br(),
                                      dbc.Row(
                                              [
                                                dbc.Col(dcc.Graph(figure=mapa1), width=6),
                                                dbc.Col(dcc.Graph(figure=mapa2), width=6),
                                              ],
                                      )
                                    ],
                            ),
                   ),
        elif active_tab == "verde":
            return html.Div(
                            html.H5(children=[html.H5('La diferencia de intensidad de los colores de los mapas por comunas muestra que no hay una relaci칩n causal entre el aumento de poblaci칩n y la cantidad de hect치reas de espacio verde por habitante.', style={'color':'black'}),
                                      html.Br(),
                                      dbc.Row(
                                              [
                                                dbc.Col(dcc.Graph(figure=mapa1), width=6),
                                                dbc.Col(dcc.Graph(figure=mapa3), width=6),
                                              ],
                                      )
                                    ],
                            ),
                   ),
    return "No tab selected"

if __name__ == "__main__":
    app.run_server(debug=True, port=8124)#8124,8125,8126,8050



